/*:
# Estructuras de control: Condicionales y Ciclos ü¶Ü
 
 Escrito por: Samuel Arturo Garrido S√°nchez
 
Las estructuras de control son elementos presentes en muchos lenguajes de programaci√≥n y swift no es la excepci√≥n. Desde que aprendes If/else, switch case, for, while, etc, en otros lenguajes como Java, solamente podr√°s encontrar equivalentes en otros lenguajes. Nos permiten controlar el flujo de ejecuciones dentro de nuestro c√≥digo para que se ejecute lo que queramos, en el momento que le indiquemos.
 
 
 ## Condicionales
 Los condicionales son elementos que nos permiten decir una pregunta con opci√≥n a verdadero/falso en cada pregunta, y realizando una serie de acciones en cada condici√≥n.
 
*/

//Un condicional if b√°sico se declara como:

let numero:Int = 1

if numero<3{
    print("El n√∫mero es menor a 3")
}else{
    print("El n√∫mero es mayor o igual a 3")
}

//Donde la acci√≥n corresponde a una comparaci√≥n, si cumple la condici√≥n realizar√° la acci√≥n contenida dentro del if, en caso contrario realizar√° otra u otras acciones


//OPERADORES L√ìGICOS

//Los operadores l√≥gicos en Swift correspoden a:

/*
 Para poder colocar los condicionales siguientes lo haremos mediante la siguiente nomenclatura:
 
 NOT :    !a
 AND :  a && b
 OR  :  a¬†|| b
 
*/


//EJEMPLO NOT
//Entra a la condici√≥n si es falso el falso, o sea verdadero. Podemos realizar un ejemplo con un acceso a un sistema

let accesoEntrada: Bool = false

if !accesoEntrada{
    print("ACCESO DENEGADO")
}else{
    print("ACCESO CORRECTO")
}

//EJEMPLO AND
//Entra a la condici√≥n si ambas condiciones son verdaderas, en caso que una o las 2 sean falsas no realizar√° las acciones dentro del if

let codigoPuertaCorrecto = true
let huellaDactilarAceptada = true

if codigoPuertaCorrecto && huellaDactilarAceptada{
    print("Bienvenido al sistema bancario")
}else{
    print("SEGURIDAD! üëÆ‚Äç‚ôÇÔ∏è")
}


//Puede llenarse de condiciones y hasta el momento que TODAS sean verdaderas, realizar√° el conjunto de acciones contenidas en el condicional


if codigoPuertaCorrecto && huellaDactilarAceptada && 5<10 && 10==10{
    print("Todas las condiciones se cumplieron")
}else{
    print("Alguna de las condiciones no se cumpli√≥")
}


//Ejemplo OR
//Entra a la condici√≥n si ALGUNO de los elementos es verdadero. Con que uno se cumpla entrar√° a la condici√≥n.

let invitacionInvitado = true
let invitacionAcompa√±ante = false

if invitacionInvitado || invitacionAcompa√±ante {
    print("Pueden pasar a la peda")
}else{
    print("Nel pastel")
}



//S√≠, se pueden combiar √©stos, para ello necesitamos par√©ntesis como en las operaciones matem√°ticas:6*5+(1*(7+5)) = 42 ¬øQu√© haces primero?

let tengoLlave:Bool = true

if (codigoPuertaCorrecto && huellaDactilarAceptada) || tengoLlave {
    print("Puedo entrar a mi casa")
}else{
    print("No puedo entrar a mi casa")
}

/*:
## CICLOS üåÄ
 Los ciclos son elementos que nos permiten repetir ciertas acciones hasta que la condici√≥n que se le establezca se cumpla. Nos permite, entre otras cosas, recorrer un arreglo, cargar im√°genes y m√°s adelante cargar elementos a una tabla como de mensajes de WhatsApp.
 
 Podemos encontrar ciclos **For, while y repeat while**
 
*/

//Un ciclo for puede ser usado con los siguientes casos:


//Si damos un rango de un √≠ndice desde d√≥nde comienza hasta d√≥nde termina, realizar√° una cuenta de 1 en 1 hasta llegar al l√≠mite.

for indice in 1...10{
    print("\(indice) ")
}


//Operador de rango medio abierto: Define un rango que corre de "a" a "b" pero no incluye a "b".

print("Operador de rango medio: ")

for rangoMedio in 0..<10{
    print(" \(rangoMedio) ")
}


//Rangos de un lado: Puedes recorrer un arreglo en un ciclo for dando un rango, en este caso names contiene 3 elementos, el 0, el 1 y el 2, y solo queremos los elementos 1 y 2.

let names:[String] = ["Samuel","Jorge","Rodrigo"]

for nombre in names[1...]{
    print(nombre)
}

//



